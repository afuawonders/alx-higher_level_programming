Test for 1-my_list.py


case 0: import

>>> MyList = __import__('1-my_list').MyList

>>>


case 1: common case

>>> my_list = MyList()

>>> my_list.append(1)

>>> my_list.append(4)

>>> my_list.append(2)

>>> my_list.append(3)

>>> my_list.append(5)

>>> print(my_list)

[1, 4, 2, 3, 5]

>>> my_list.print_sorted()

[1, 2, 3, 4, 5]

>>> print(my_list)

[1, 4, 2, 3, 5]

>>>



case 2: not defined object

>>> MyList = __import__('1-my_list').MyList

>>> my_list2.print_sorted()

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'my_list2' is not defined

>>>



case 3: passed a list

>>> a = [1, 9, 4]

>>> my_list = MyList(a)

>>> my_list.print_sorted()

[1, 4, 9]

>>>



case 4: empty list

>>> a = []

>>> my_list = MyList(a)

>>> my_list.print_sorted()

[]

>>>



case 5: unique number

>>> my_list = MyList()

>>> my_list.append(1)

>>> my_list.print_sorted()

[1]

>>> print(my_list)

[1]

>>>



case 6: same number

>>> my_list2 = MyList()

>>> my_list2.append(1)

>>> my_list2.append(1)

>>> my_list2.append(1)

>>> my_list2.append(1)

>>> my_list2.print_sorted()

[1, 1, 1, 1]

>>>




case 7: negative numbers

>>> MyList = __import__('1-my_list').MyList

>>> my_list = MyList()

>>> my_list.append(5)

>>> my_list.append(1)

>>> my_list.append(-1)

>>> my_list.append(51)

>>> my_list.append(-5)

>>> my_list.print_sorted()

[-5, -1, 1, 5, 51]

>>>




7-base_geometry.txt

 ``7-base_geometry test file``


Using ``integer_validator`` function


	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

	>>> bg = BaseGeometry()

	>>> bg.integer_validator("my_int", 12)

	>>> bg.integer_validator("width", 89)

	>>> bg.integer_validator("name", "John")

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer

	>>> bg.integer_validator("float_n", 5.23)

	Traceback (most recent call last):

        ...

	TypeError: float_n must be an integer

	>>> bg.integer_validator("float_n", float("inf"))

	Traceback (most recent call last):

        ...

	TypeError: float_n must be an integer

	>>> bg.integer_validator("float_n", float("-inf"))

	Traceback (most recent call last):

        ...

	TypeError: float_n must be an integer

	>>> bg.integer_validator("boolean", True)

	Traceback (most recent call last):

        ...

	TypeError: boolean must be an integer

	>>> bg.integer_validator("age", 0)

	Traceback (most recent call last):

        ...

	ValueError: age must be greater than 0

	>>> bg.integer_validator("distance", -4)

	Traceback (most recent call last):

        ...

	ValueError: distance must be greater than 0

	>>> bg.integer_validator("missing1")

	Traceback (most recent call last):

        ...

	TypeError: integer_validator() missing 1 required positional argument: 'value'

	>>> bg.integer_validator()

	Traceback (most recent call last):

        ...

	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	>>> bg.integer_validator("name", None)

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer

	>>> bg.area()

	Traceback (most recent call last):

	...

	Exception: area() is not implemented

	>>> bg.area("aaa")

	Traceback (most recent call last):

	...

	TypeError: area() takes 1 positional argument but 2 were given

	>>> bg.integer_validator("name", 2+5j)

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer

	>>> bg.integer_validator("name", [1, 2])

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer

	>>> bg.integer_validator("name", (1, 2))

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer

	>>> bg.integer_validator("name", {"a": 8})

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer

	>>> bg.integer_validator("name", {2, 8})

	Traceback (most recent call last):

        ...

	TypeError: name must be an integer
